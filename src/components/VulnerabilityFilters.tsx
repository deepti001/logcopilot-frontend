import { useCallback, useMemo } from "react";
import { Badge } from "./ui/badge";
import { BadgeSeverity } from "./ui/badge-severity";
import { ChipFilter } from "./ui/chip-filter";
import { Button } from "./ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { X, Filter } from "lucide-react";

export interface FilterState {
  release: string[];
  environment: string[];
  repo: string[];
  image: string[];
  severity: string[];
}

interface VulnerabilityFiltersProps {
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  availableOptions: {
    releases: string[];
    environments: string[];
    repos: string[];
    images: string[];
    severities: string[];
  };
}

export function VulnerabilityFilters({ filters, onFiltersChange, availableOptions }: VulnerabilityFiltersProps) {
  const addFilter = useCallback((category: keyof FilterState, value: string) => {
    if (!filters[category].includes(value)) {
      const newFilters = {
        ...filters,
        [category]: [...filters[category], value]
      };
      onFiltersChange(newFilters);
    }
  }, [filters, onFiltersChange]);

  const removeFilter = useCallback((category: keyof FilterState, value: string) => {
    const newFilters = {
      ...filters,
      [category]: filters[category].filter(item => item !== value)
    };
    onFiltersChange(newFilters);
  }, [filters, onFiltersChange]);

  const clearAllFilters = useCallback(() => {
    const newFilters = {
      release: [],
      environment: [],
      repo: [],
      image: [],
      severity: []
    };
    onFiltersChange(newFilters);
  }, [onFiltersChange]);

  const hasActiveFilters = useMemo(() => 
    Object.values(filters).some(arr => arr.length > 0), 
    [filters]
  );



  return (
    <div className="space-y-4">
      {/* Filter Controls */}
      <div className="flex flex-wrap items-center gap-2">
        <div className="flex items-center gap-1 text-sm text-muted-foreground">
          <Filter className="h-4 w-4" />
          <span>Filters:</span>
        </div>

        {/* Release Filter */}
        <Select 
          value="" 
          onValueChange={(value) => value && addFilter("release", value)}
        >
          <SelectTrigger className="w-32 h-8">
            <SelectValue placeholder="Release" />
          </SelectTrigger>
          <SelectContent>
            {availableOptions.releases.map(release => (
              <SelectItem key={release} value={release} disabled={filters.release.includes(release)}>
                {release}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        {/* Environment Filter */}
        <Select 
          value="" 
          onValueChange={(value) => value && addFilter("environment", value)}
        >
          <SelectTrigger className="w-32 h-8">
            <SelectValue placeholder="Environment" />
          </SelectTrigger>
          <SelectContent>
            {availableOptions.environments.map(env => (
              <SelectItem key={env} value={env} disabled={filters.environment.includes(env)}>
                {env}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        {/* Repo Filter */}
        <Select 
          value="" 
          onValueChange={(value) => value && addFilter("repo", value)}
        >
          <SelectTrigger className="w-32 h-8">
            <SelectValue placeholder="Repository" />
          </SelectTrigger>
          <SelectContent>
            {availableOptions.repos.map(repo => (
              <SelectItem key={repo} value={repo} disabled={filters.repo.includes(repo)}>
                {repo}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        {/* Image Filter */}
        <Select 
          value="" 
          onValueChange={(value) => value && addFilter("image", value)}
        >
          <SelectTrigger className="w-32 h-8">
            <SelectValue placeholder="Image" />
          </SelectTrigger>
          <SelectContent>
            {availableOptions.images.map(image => (
              <SelectItem key={image} value={image} disabled={filters.image.includes(image)}>
                {image}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        {/* Severity Filter */}
        <Select 
          value="" 
          onValueChange={(value) => value && addFilter("severity", value)}
        >
          <SelectTrigger className="w-32 h-8">
            <SelectValue placeholder="Severity" />
          </SelectTrigger>
          <SelectContent>
            {availableOptions.severities.map(severity => (
              <SelectItem key={severity} value={severity} disabled={filters.severity.includes(severity)}>
                {severity}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        {/* Clear All */}
        {hasActiveFilters && (
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={clearAllFilters}
            className="h-8 text-xs"
          >
            Clear all
          </Button>
        )}
      </div>

      {/* Active Filters */}
      {hasActiveFilters && (
        <div className="flex flex-wrap items-center gap-2">
          {/* Release filters */}
          {filters.release.map(release => (
            <ChipFilter
              key={`release-${release}`}
              label={`Release: ${release}`}
              selected={true}
              onRemove={() => removeFilter("release", release)}
            />
          ))}

          {/* Environment filters */}
          {filters.environment.map(env => (
            <ChipFilter
              key={`env-${env}`}
              label={`Env: ${env}`}
              selected={true}
              onRemove={() => removeFilter("environment", env)}
            />
          ))}

          {/* Repo filters */}
          {filters.repo.map(repo => (
            <ChipFilter
              key={`repo-${repo}`}
              label={`Repo: ${repo}`}
              selected={true}
              onRemove={() => removeFilter("repo", repo)}
            />
          ))}

          {/* Image filters */}
          {filters.image.map(image => (
            <ChipFilter
              key={`image-${image}`}
              label={`Image: ${image}`}
              selected={true}
              onRemove={() => removeFilter("image", image)}
            />
          ))}

          {/* Severity filters */}
          {filters.severity.map(severity => (
            <ChipFilter
              key={`severity-${severity}`}
              label={`Severity: ${severity}`}
              selected={true}
              onRemove={() => removeFilter("severity", severity)}
            />
          ))}
        </div>
      )}
    </div>
  );
}