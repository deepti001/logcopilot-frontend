import { useCallback, useMemo } from "react";
import { ChipFilter } from "./ui/chip-filter";
import { Button } from "./ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Filter } from "lucide-react";

export interface FilterState {
  severity: string[];
}

interface VulnerabilityFiltersProps {
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  availableOptions: {
    severities: string[];
  };
}

export function VulnerabilityFilters({
  filters,
  onFiltersChange,
  availableOptions,
}: VulnerabilityFiltersProps) {
  const addFilter = useCallback(
    (category: keyof FilterState, value: string) => {
      if (!filters[category].includes(value)) {
        const newFilters = {
          ...filters,
          [category]: [...filters[category], value],
        };
        onFiltersChange(newFilters);
      }
    },
    [filters, onFiltersChange]
  );

  const removeFilter = useCallback(
    (category: keyof FilterState, value: string) => {
      const newFilters = {
        ...filters,
        [category]: filters[category].filter((item) => item !== value),
      };
      onFiltersChange(newFilters);
    },
    [filters, onFiltersChange]
  );

  const clearAllFilters = useCallback(() => {
    const newFilters = {
      severity: [],
    };
    onFiltersChange(newFilters);
  }, [onFiltersChange]);

  const hasActiveFilters = useMemo(
    () => filters.severity.length > 0,
    [filters]
  );

  return (
    <div className="space-y-4">
      {/* Filter Controls */}
      <div className="flex flex-wrap items-center gap-2">
        <div className="flex items-center gap-1 text-sm text-muted-foreground">
          <Filter className="h-4 w-4" />
          <span>Filters:</span>
        </div>

        {/* Severity Filter */}
        <Select
          value=""
          onValueChange={(value) => value && addFilter("severity", value)}
        >
          <SelectTrigger className="w-32 h-8">
            <SelectValue placeholder="Severity" />
          </SelectTrigger>
          <SelectContent>
            {availableOptions.severities.map((severity) => (
              <SelectItem
                key={severity}
                value={severity}
                disabled={filters.severity.includes(severity)}
              >
                {severity}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        {/* Clear All */}
        {hasActiveFilters && (
          <Button
            variant="ghost"
            size="sm"
            onClick={clearAllFilters}
            className="h-8 text-xs"
          >
            Clear all
          </Button>
        )}
      </div>

      {/* Active Filters */}
      {hasActiveFilters && (
        <div className="flex flex-wrap items-center gap-2">
          {filters.severity.map((severity) => (
            <ChipFilter
              key={`severity-${severity}`}
              label={`Severity: ${severity}`}
              selected={true}
              onRemove={() => removeFilter("severity", severity)}
            />
          ))}
        </div>
      )}
    </div>
  );
}
