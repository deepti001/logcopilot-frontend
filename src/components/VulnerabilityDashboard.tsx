import React, { useEffect, useMemo, useState } from "react";
import {
  Card, CardContent, CardDescription, CardHeader, CardTitle,
} from "./ui/card";
import { BadgeSeverity } from "./ui/badge-severity";
import { CardKPI } from "./ui/card-kpi";
import { ButtonIconOnly } from "./ui/button-icon-only";
import { Button } from "./ui/button";
import {
  Table, TableBody, TableCell, TableHead, TableHeader, TableRow,
} from "./ui/table";
import {
  AlertTriangle, Bug, Eye, Copy, ExternalLink, Sparkles,
} from "lucide-react";
import { motion } from "motion/react";
import { RemediationDrawer } from "./RemediationDrawer";
import { getVulnerabilities, suggestRemediation } from "../services/api";
import type { VulnerabilityDTO } from "../types/vulnerability";
import {
  VulnerabilityFilters,
  FilterState,
} from "./VulnerabilityFilters";
import { suggestionKey } from "../utils/suggestions";

/** Map UI timeframe -> API accepted values */
function toApiTimeframe(ui: string): "last-build" | "1d" | "1w" | "1m" {
  switch (ui) {
    case "1-day": return "1d";
    case "1-week": return "1w";
    case "1-month": return "1m";
    default: return "last-build";
  }
}

function formatIST(iso?: string | null) {
  if (!iso) return "-";
  try {
    return new Date(iso).toLocaleString("en-IN", { timeZone: "Asia/Kolkata" });
  } catch {
    return iso;
  }
}

type Row = VulnerabilityDTO & { aiSuggestion?: string };

interface PieData {
  name: "CRITICAL" | "HIGH" | "MEDIUM" | "LOW";
  count: number;
  color: string;
}

/** Simple SVG donut with legend handled outside (kept unchanged) */
function CustomPieChart({ data }: { data: PieData[] }) {
  const size = 220;
  const center = size / 2;
  const outerR = 90;
  const innerR = 20;

  const total = data.reduce((s, d) => s + d.count, 0);
  if (total === 0) {
    return (
      <div className="h-[220px] flex items-center justify-center text-muted-foreground">
        No data
      </div>
    );
  }

  const nonZero = data.filter(d => d.count > 0);

  const arcPath = (startAngle: number, endAngle: number) => {
    const sx = center + outerR * Math.cos(startAngle);
    const sy = center + outerR * Math.sin(startAngle);
    const ex = center + outerR * Math.cos(endAngle);
    const ey = center + outerR * Math.sin(endAngle);
    const largeArc = endAngle - startAngle > Math.PI ? 1 : 0;

    const ix = center + innerR * Math.cos(endAngle);
    const iy = center + innerR * Math.sin(endAngle);
    const jx = center + innerR * Math.cos(startAngle);
    const jy = center + innerR * Math.sin(startAngle);
    const largeArcInner = largeArc;

    return `
      M ${sx} ${sy}
      A ${outerR} ${outerR} 0 ${largeArc} 1 ${ex} ${ey}
      L ${ix} ${iy}
      A ${innerR} ${innerR} 0 ${largeArcInner} 0 ${jx} ${jy}
      Z
    `;
  };

  if (nonZero.length === 1) {
    const only = nonZero[0];
    return (
      <svg width={size} height={size} className="drop-shadow-sm">
        <circle cx={center} cy={center} r={outerR} fill={only.color} />
        <circle cx={center} cy={center} r={innerR} fill="hsl(var(--card))" />
        <text x={center} y={center + 6} textAnchor="middle" className="text-lg font-bold fill-foreground">
          {total}
        </text>
      </svg>
    );
  }

  let cumulative = -Math.PI / 2;
  return (
    <svg width={size} height={size} className="drop-shadow-sm">
      {data.filter(d => d.count > 0).map((d, i) => {
        const angle = (d.count / total) * Math.PI * 2;
        const start = cumulative;
        const end = cumulative + angle;
        cumulative = end;
        return (
          <path key={i} d={arcPath(start, end)} fill={d.color} stroke="white" strokeWidth={1.5} />
        );
      })}
      <text x={center} y={center + 6} textAnchor="middle" className="text-lg font-bold fill-foreground">
        {total}
      </text>
    </svg>
  );
}

interface VulnerabilityDashboardProps {
  environment: string; // from GlobalContextBar (keep as-is)
  release: string;
  timePeriod?: "last-build" | "1-day" | "1-week" | "1-month";
  activeFilters?: string[];
  onFiltersChange?: (filters: string[]) => void;
  onExportableRowsChange?: (rows: any[]) => void;
  seedSuggestions?: Record<string, string>;
}

export function VulnerabilityDashboard({
  environment,
  release,
  timePeriod = "last-build",
  activeFilters = [],
  onFiltersChange,
  onExportableRowsChange,
  seedSuggestions,
}: VulnerabilityDashboardProps) {
  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(false);

  // âœ… FilterState now ONLY severity (client-side)
  const [filters, setFilters] = useState<FilterState>({
    severity: [],
  });

  const [localSuggestions, setLocalSuggestions] = useState<Record<string, string>>({});

  // --- Sorting and Pagination state (unchanged) ---
  const [sortField, setSortField] = useState<"severity" | "firstSeen" | "cvss">("severity");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 2;

  // âœ… Sync only severity chips from activeFilters
  useEffect(() => {
    if (!activeFilters || activeFilters.length === 0) {
      setFilters({ severity: [] });
      return;
    }
    const next: FilterState = { severity: [] };
    for (const chip of activeFilters) {
      const [k, v] = chip.split(": ");
      if (k?.toLowerCase() === "severity" && v) next.severity.push(v);
    }
    setFilters(prev => (JSON.stringify(prev) === JSON.stringify(next) ? prev : next));
  }, [activeFilters]);

  // When filters or sort change, reset to page 1
  useEffect(() => {
    setCurrentPage(1);
  }, [JSON.stringify(filters), sortField, sortDirection, environment, release, timePeriod]);

  // âœ… Fetch vulnerabilities ONLY on env/release/time changes
  // (do NOT refetch on severity filter changes)
  useEffect(() => {
    let cancelled = false;
    (async () => {
      setLoading(true);
      try {
        let timeframe = toApiTimeframe(timePeriod);
        let image_digest: string | undefined;

        if (typeof timePeriod === "string" && timePeriod.startsWith("image-digest:")) {
          image_digest = timePeriod.slice("image-digest:".length).trim();
          // backend still expects timeframe; keep it to "last-build"
          timeframe = "last-build";
        }

        const data = await getVulnerabilities({
          env: environment,
          timeframe,
          image_digest,
          // static repo value, passed as `repo` to match api.ts
          repo: "org/samplecontentgenerator",
          // ðŸ‘‡ do NOT send severity anymore; filtering is client-side
          // severity: filters.severity.length ? filters.severity : undefined,
        });

        if (!cancelled) {
          const normalized = (data ?? []).map((v) => ({
            ...v,
            name: v.name || v.cve_id || "",
          })) as Row[];
          setRows(normalized);
        }
      } catch (e) {
        console.error("getVulnerabilities failed:", e);
        if (!cancelled) setRows([]);
      } finally {
        if (!cancelled) setLoading(false);
      }
    })();
    return () => { cancelled = true; };
  }, [environment, release, timePeriod]); // ðŸ‘ˆ removed severity from deps

  // âœ… Options only include severities (no releases/env/repos)
  const filterOptions = useMemo(() => {
    const severities = Array.from(new Set(rows.map(r => r.severity))).filter(Boolean) as string[];
    return {
      severities: severities.length ? severities : ["CRITICAL","HIGH","MEDIUM","LOW"],
    };
  }, [rows]);

  // âœ… Filtering only by severity (client-side)
  const filtered = useMemo(() => {
    const base = rows.filter((r) => {
      const okSev =
        !filters.severity.length ||
        (
          r.severity &&
          filters.severity.map(s => s.toUpperCase().trim())
            .includes((r.severity || "").toUpperCase().trim())
        );
      return okSev;
    });

    // --- Sorting logic (unchanged) ---
    const severityRank: Record<string, number> = { CRITICAL: 4, HIGH: 3, MEDIUM: 2, LOW: 1 };

    return [...base].sort((a, b) => {
      switch (sortField) {
        case "severity": {
          const aRank = severityRank[a.severity?.toUpperCase() || ""] || 0;
          const bRank = severityRank[b.severity?.toUpperCase() || ""] || 0;
          return sortDirection === "asc" ? aRank - bRank : bRank - aRank;
        }
        case "cvss": {
          const aScore = a.nvd_cvss_v3_score ?? a.cvss_score ?? 0;
          const bScore = b.nvd_cvss_v3_score ?? b.cvss_score ?? 0;
          return sortDirection === "asc" ? aScore - bScore : bScore - aScore;
        }
        case "firstSeen": {
          const aTime = new Date(a.first_seen_time ?? a.nvd_published_date ?? 0).getTime();
          const bTime = new Date(b.first_seen_time ?? b.nvd_published_date ?? 0).getTime();
          return sortDirection === "asc" ? aTime - bTime : bTime - aTime;
        }
        default:
          return 0;
      }
    });
  }, [rows, filters, sortField, sortDirection]);

  // Export rows callback (unchanged)
  useEffect(() => {
    onExportableRowsChange?.(filtered);
  }, [filtered, onExportableRowsChange]);

  // Seed suggestions (unchanged)
  useEffect(() => {
    if (!seedSuggestions) return;
    setLocalSuggestions(prev => ({ ...prev, ...seedSuggestions }));
  }, [seedSuggestions]);

  function getAISuggestionForRow(v: any): string {
    const key = suggestionKey(v);
    return (
      localSuggestions[key] ||
      v.aiSuggestion ||
      v.aiRecommendation ||
      ""
    );
  }

  async function handleCopySuggestion(v: any) {
    const key = suggestionKey(v);
    let text = getAISuggestionForRow(v);

    if (!text) {
      try {
        const res = await suggestRemediation({
          name: v.name || v.cve_id || "",
          severity: v.severity || "",
          package_name: v.package_name,
          package_version: v.package_version,
          description: v.description || v.nvd_description || "",
        });
        text = res?.suggestion || "";
        if (text) {
          setLocalSuggestions(prev => ({ ...prev, [key]: text }));
        }
      } catch (e) {
        // ignore
      }
    }

    if (text) {
      await navigator.clipboard.writeText(text);
      // toast if you have one
    }
  }

  // --- Pagination logic (unchanged) ---
  const totalPages = Math.max(1, Math.ceil((filtered?.length || 0) / rowsPerPage));
  const paginatedRows = useMemo(() => {
    const start = (currentPage - 1) * rowsPerPage;
    const end = currentPage * rowsPerPage;
    return filtered.slice(start, end);
  }, [filtered, currentPage]);

  // KPIs & Chart data (unchanged)
  const severityCounts = useMemo(() => {
    const acc: Record<string, number> = {};
    for (const r of filtered) {
      const s = (r.severity || "UNKNOWN").toUpperCase();
      acc[s] = (acc[s] || 0) + 1;
    }
    return acc;
  }, [filtered]);

  const totalVulns = Object.values(severityCounts).reduce((a, b) => a + b, 0);

  const pieData: PieData[] = [
    { name: "CRITICAL", count: severityCounts.CRITICAL || 0, color: "var(--severity-critical)" },
    { name: "HIGH",     count: severityCounts.HIGH || 0,     color: "var(--severity-high)" },
    { name: "MEDIUM",   count: severityCounts.MEDIUM || 0,   color: "var(--severity-medium)" },
    { name: "LOW",      count: severityCounts.LOW || 0,      color: "var(--severity-low)" },
  ];

  return (
    <div className="space-y-6">
      {/* Header (unchanged) */}
      <div className="flex items-center justify-between">
        <div>
          <h2>Docker Vulnerability Analysis</h2>
          <p className="text-muted-foreground">
            {timePeriod === "last-build" ? "Latest build analysis" : `Analysis for ${timePeriod.replace("-", " ")}`}
          </p>
        </div>
      </div>

      {/* KPIs (unchanged) */}
      <motion.div
        className="grid grid-cols-1 gap-4 md:grid-cols-5"
        layout
        transition={{ duration: 0.25, ease: "easeInOut" }}
      >
        <CardKPI title="Total Vulnerabilities" value={totalVulns} icon={Bug} subtitle="In current build" />
        <CardKPI title="Critical" value={severityCounts.CRITICAL || 0} icon={AlertTriangle} iconColor="text-red-800" subtitle="Immediate Action" />
        <CardKPI title="High" value={severityCounts.HIGH || 0} icon={AlertTriangle} iconColor="text-orange-500" subtitle="High Priority" />
        <CardKPI title="Medium" value={severityCounts.MEDIUM || 0} icon={AlertTriangle} iconColor="text-yellow-600" subtitle="Review soon" />
        <CardKPI title="low" value={severityCounts.LOW || 0} icon={AlertTriangle} iconColor="text-green-500" subtitle="Monitor occasionally" />
      </motion.div>

      {/* Chart (unchanged) */}
      <motion.div className="grid grid-cols-1 gap-6" layout transition={{ duration: 0.25, ease: "easeInOut" }}>
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Distribution</CardTitle>
            <CardDescription>
              {timePeriod === "last-build" ? "Current vulnerabilities by severity" : `Vulnerabilities by severity (${timePeriod.replace("-", " ")})`}
            </CardDescription>
          </CardHeader>
          <CardContent className="p-6">
            {totalVulns > 0 ? (
              <div className="space-y-4">
                <div className="w-full h-[220px] flex items-center justify-center">
                  <CustomPieChart data={pieData} />
                </div>
                {/* Legend under the chart (kept) */}
                <div className="flex flex-wrap justify-center gap-4 h-[44px] items-center">
                  {pieData.map((item) => (
                    <div key={item.name} className="flex items-center gap-2">
                      <div className="w-4 h-4 rounded-full" style={{ backgroundColor: item.color }} />
                      <span className="text-sm font-medium">
                        {item.name} ({item.count})
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-[200px] text-muted-foreground">
                <h3 className="font-medium mb-1">No Vulnerabilities Found</h3>
                <p className="text-sm text-center">
                  {Object.values(filters).some(v => v.length > 0)
                    ? "No vulnerabilities match the current filters"
                    : "No vulnerabilities detected in this period"}
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </motion.div>

      {/* Filters â€” now only Severity (client-side) */}
      <div>
        <VulnerabilityFilters
          key={`${environment}-${release}-${timePeriod}`}
          filters={filters}
          onFiltersChange={(newFilters) => {
            setFilters(newFilters);
            if (onFiltersChange) {
              const chips: string[] = [];
              // Only emit severity chips now
              newFilters.severity.forEach((v) => chips.push(`severity: ${v}`));
              onFiltersChange(chips);
            }
          }}
          availableOptions={{
            severities: filterOptions.severities,
          }}
        />
      </div>

      {/* Table (unchanged) */}
      <div>
        <Card>
          <CardHeader>
            <CardTitle>
              {timePeriod === "last-build" ? "Build Vulnerabilities" : "Vulnerabilities Found"}
            </CardTitle>
            <CardDescription>
              {timePeriod === "last-build"
                ? "Vulnerabilities detected in current Docker build â€¢ Sorted by severity"
                : "Vulnerabilities detected in selected time period"}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>CVE</TableHead>
                  <TableHead>Package / Installed â†’ Fixed</TableHead>

                  <TableHead
                    className="cursor-pointer select-none"
                    onClick={() => {
                      setSortField("severity");
                      setSortDirection(prev =>
                        sortField === "severity" && prev === "desc" ? "asc" : "desc"
                      );
                    }}
                  >
                    Severity {sortField === "severity" && (sortDirection === "asc" ? "â†‘" : "â†“")}
                  </TableHead>

                  <TableHead
                    className="cursor-pointer select-none"
                    onClick={() => {
                      setSortField("firstSeen");
                      setSortDirection(prev =>
                        sortField === "firstSeen" && prev === "desc" ? "asc" : "desc"
                      );
                    }}
                  >
                    First Seen {sortField === "firstSeen" && (sortDirection === "asc" ? "â†‘" : "â†“")}
                  </TableHead>

                  <TableHead
                    className="cursor-pointer select-none"
                    onClick={() => {
                      setSortField("cvss");
                      setSortDirection(prev =>
                        sortField === "cvss" && prev === "desc" ? "asc" : "desc"
                      );
                    }}
                  >
                    CVSS {sortField === "cvss" && (sortDirection === "asc" ? "â†‘" : "â†“")}
                  </TableHead>

                  <TableHead>Remediation (AI)</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {loading && (
                  <TableRow>
                    <TableCell colSpan={8} className="text-muted-foreground">
                      Loadingâ€¦
                    </TableCell>
                  </TableRow>
                )}
                {!loading && paginatedRows.length === 0 && (
                  <TableRow>
                    <TableCell colSpan={8} className="text-muted-foreground">
                      No vulnerabilities found.
                    </TableCell>
                  </TableRow>
                )}
                {!loading && paginatedRows.map((v) => {
                  const cve = v.name || v.cve_id || "-";
                  const pkg = v.package_name ?? "-";
                  const installed = v.package_version ?? "-";
                  const fixed = v.fixed_version ?? "Latest";
                  const firstSeen = v.first_seen_time || v.nvd_published_date || null;
                  const cvss = v.nvd_cvss_v3_score ?? v.cvss_score ?? null;
                  const aiText = getAISuggestionForRow(v);

                  return (
                    <TableRow key={`${cve}-${firstSeen ?? ""}`}>
                      <TableCell className="font-mono text-sm">
                        {v.uri ? (
                          <a className="underline" href={v.uri} target="_blank" rel="noreferrer">{cve}</a>
                        ) : cve}
                      </TableCell>

                      <TableCell className="min-w-[200px]">
                        <div className="space-y-1">
                          <div className="font-mono text-sm">{pkg}</div>
                          <div className="text-xs text-muted-foreground">
                            {installed} â†’ {fixed}
                          </div>
                        </div>
                      </TableCell>

                      <TableCell>
                        <BadgeSeverity severity={
                          (v.severity || "LOW").toLowerCase() as "critical"|"high"|"medium"|"low"
                        }/>
                      </TableCell>

                      <TableCell className="min-w-[150px]">
                        <div className="space-y-1">
                          <div className="font-mono text-sm">
                            {v.first_seen_build ?? "-"}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {formatIST(firstSeen)} {firstSeen ? "IST" : ""}
                          </div>
                        </div>
                      </TableCell>

                      <TableCell>
                        <span className="font-mono text-sm">
                          {cvss ?? "N/A"}
                        </span>
                        {v.nvd_cvss_v3_vector && (
                          <span title={v.nvd_cvss_v3_vector} className="ml-2 text-xs text-muted-foreground underline cursor-help">
                            vector
                          </span>
                        )}
                      </TableCell>

                      {/* Remediation column */}
                      <TableCell className="min-w-[220px]">
                        <div className="flex items-center gap-2">
                          <div className="flex-1 text-sm text-muted-foreground truncate">
                            {aiText ? aiText.split(".")[0] + "..." : "Click View/Copy to generate"}
                          </div>
                          <RemediationDrawer
                            vulnerability={v as any}
                            aiText={aiText}
                          >
                            <Button variant="ghost" size="sm" className="h-7 px-2">
                              <Sparkles className="h-3 w-3 mr-1" />
                              View
                            </Button>
                          </RemediationDrawer>
                        </div>
                      </TableCell>

                      {/* Actions */}
                      <TableCell>
                        <div className="flex items-center gap-1">
                          <ButtonIconOnly
                            icon={Eye}
                            tooltip="View CVE at NVD"
                            variant="view"
                            onClick={() => window.open(v.uri || `https://nvd.nist.gov/vuln/detail/${cve}`, "_blank")}
                          />
                          <ButtonIconOnly
                            icon={Copy}
                            tooltip="Copy remediation"
                            variant="copy"
                            onClick={() => handleCopySuggestion(v)}
                          />
                          <ButtonIconOnly
                            icon={ExternalLink}
                            tooltip="Open at MITRE"
                            variant="default"
                            onClick={() => window.open(`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${cve}`, "_blank")}
                          />
                        </div>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>

            {/* Pagination controls (unchanged) */}
            <div className="flex items-center justify-between mt-4 text-sm">
              <div>
                Showing {(currentPage - 1) * rowsPerPage + 1}â€“
                {Math.min(currentPage * rowsPerPage, filtered?.length || 0)} of {filtered?.length || 0}
              </div>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  disabled={currentPage === 1}
                  onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                >
                  Previous
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  disabled={currentPage >= totalPages}
                  onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                >
                  Next
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
