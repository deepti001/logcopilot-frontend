import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "./ui/card";
import { Badge } from "./ui/badge";
import { BadgeSeverity } from "./ui/badge-severity";
import { CardKPI } from "./ui/card-kpi";
import { ButtonIconOnly } from "./ui/button-icon-only";
import { Button } from "./ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "./ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "./ui/tooltip";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import {
  AlertTriangle,
  Shield,
  Bug,
  Calendar,
  Sparkles,
  TrendingUp,
  TrendingDown,
  Minus,
  Eye,
  Copy,
  ExternalLink,
  Brain,
} from "lucide-react";
import { vulnerabilityService } from "../services/vulnerabilityService";
import { VulnerabilityRecord } from "../types/vulnerability";
import { motion, AnimatePresence } from "motion/react";
import { RemediationDrawer } from "./RemediationDrawer";
import {
  VulnerabilityFilters,
  FilterState,
} from "./VulnerabilityFilters";

// Custom SVG Pie Chart Component
interface PieData {
  name: string;
  count: number;
  color: string;
}

interface CustomPieChartProps {
  data: PieData[];
}

function CustomPieChart({ data }: CustomPieChartProps) {
  const size = 200;
  const center = size / 2;
  const radius = 80;

  const total = data.reduce((sum, item) => sum + item.count, 0);

  let cumulativePercentage = 0;

  const createPath = (
    percentage: number,
    cumulativePercentage: number,
  ) => {
    const startAngle =
      cumulativePercentage * 2 * Math.PI - Math.PI / 2;
    const endAngle =
      (cumulativePercentage + percentage) * 2 * Math.PI -
      Math.PI / 2;

    const x1 = center + radius * Math.cos(startAngle);
    const y1 = center + radius * Math.sin(startAngle);
    const x2 = center + radius * Math.cos(endAngle);
    const y2 = center + radius * Math.sin(endAngle);

    const largeArc = percentage > 0.5 ? 1 : 0;

    return `M ${center} ${center} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;
  };

  return (
    <div className="relative">
      <svg
        width={size}
        height={size}
        className="drop-shadow-sm"
      >
        {data.map((item, index) => {
          const percentage = item.count / total;
          const path = createPath(
            percentage,
            cumulativePercentage,
          );
          cumulativePercentage += percentage;

          return (
            <g key={index}>
              <path
                d={path}
                fill={item.color}
                stroke="white"
                strokeWidth="2"
                className="hover:opacity-80 transition-opacity cursor-pointer"
              />
            </g>
          );
        })}
        {/* Center circle for donut effect */}
        <circle
          cx={center}
          cy={center}
          r={8}
          fill="hsl(var(--card))"
          stroke="hsl(var(--border))"
          strokeWidth="1"
        />
        {/* Total count in center */}
        <text
          x={center - 10}
          y={center - 10}
          textAnchor="middle"
          className="text-lg font-bold fill-foreground"
        >
          {total}
        </text>
      </svg>
    </div>
  );
}

interface VulnerabilityDashboardProps {
  environment: string;
  release: string;
  timePeriod?: string;
  activeFilters?: string[];
  onFiltersChange?: (filters: string[]) => void;
}

export function VulnerabilityDashboard({
  environment,
  release,
  timePeriod = "last-build",
  activeFilters = [],
  onFiltersChange,
}: VulnerabilityDashboardProps) {
  const [vulnerabilities, setVulnerabilities] = useState<
    VulnerabilityRecord[]
  >([]);
  const [filteredVulnerabilities, setFilteredVulnerabilities] =
    useState<VulnerabilityRecord[]>([]);
  const [buildInfo, setBuildInfo] = useState<any>(null);
  const [buildComparison, setBuildComparison] = useState({
    newInBuild: 0,
    resolvedSincePrevious: 0,
    unchanged: 0,
  });
  const [filters, setFilters] = useState<FilterState>({
    release: [],
    environment: [],
    repo: [],
    image: [],
    severity: [],
  });

  // Sync filters when global filters are removed (no circular dependency)
  useEffect(() => {
    const updatedFilters: FilterState = {
      release: [],
      environment: [],
      repo: [],
      image: [],
      severity: [],
    };

    activeFilters.forEach((filter) => {
      const [category, value] = filter.split(": ");
      if (category in updatedFilters) {
        updatedFilters[category as keyof FilterState].push(
          value,
        );
      }
    });

    // Only update if there's actually a difference to prevent infinite loops
    const currentFiltersString = JSON.stringify(filters);
    const newFiltersString = JSON.stringify(updatedFilters);
    
    if (currentFiltersString !== newFiltersString) {
      setFilters(updatedFilters);
    }
  }, [activeFilters]);
  const [filterOptions, setFilterOptions] = useState({
    releases: [],
    environments: [],
    repos: [],
    images: [],
    severities: [],
  });
  const [activeComparisonFilter, setActiveComparisonFilter] =
    useState<string | null>(null);

  // One-time initialization of realistic mock data
  useEffect(() => {
    // Reset mock data for demonstration - this ensures fresh data with realistic time-based variations
    vulnerabilityService.resetMockData();
  }, []); // Empty dependency array ensures this runs only once

  useEffect(() => {
    // Load vulnerabilities for current selection
    loadVulnerabilities();

    // Load filter options
    setFilterOptions(vulnerabilityService.getFilterOptions());
  }, [environment, release, timePeriod]);

  useEffect(() => {
    // Apply filters to vulnerabilities
    const filtered =
      vulnerabilityService.getFilteredVulnerabilities(
        vulnerabilities,
        filters,
      );
    setFilteredVulnerabilities(filtered);
  }, [vulnerabilities, filters]);

  const loadVulnerabilities = () => {
    const vulns =
      vulnerabilityService.getVulnerabilitiesForPeriod(
        environment,
        release,
        timePeriod,
      );
    setVulnerabilities(vulns);

    if (timePeriod === "last-build") {
      const build = vulnerabilityService.getLastBuildInfo(
        environment,
        release,
      );
      setBuildInfo(build);

      // Load build comparison data
      const comparison =
        vulnerabilityService.getBuildComparison(
          environment,
          release,
        );
      setBuildComparison(comparison);
    } else {
      setBuildInfo(null);
      setBuildComparison({
        newInBuild: 0,
        resolvedSincePrevious: 0,
        unchanged: 0,
      });
    }
  };

  // Generate vulnerability data from filtered vulnerabilities
  const vulnerabilityData = React.useMemo(() => {
    const severityCounts = filteredVulnerabilities.reduce(
      (acc, vuln) => {
        const severity = vuln.severity.toLowerCase();
        acc[severity] = (acc[severity] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>,
    );

    const data = [
      {
        name: "Critical",
        count: severityCounts.critical || 0,
        color: "var(--severity-critical)",
      },
      {
        name: "High",
        count: severityCounts.high || 0,
        color: "var(--severity-high)",
      },
      {
        name: "Medium",
        count: severityCounts.medium || 0,
        color: "var(--severity-medium)",
      },
      {
        name: "Low",
        count: severityCounts.low || 0,
        color: "var(--severity-low)",
      },
    ];

    // Only filter out zero counts if there are some vulnerabilities to show
    const hasVulnerabilities = data.some(
      (item) => item.count > 0,
    );
    return hasVulnerabilities
      ? data.filter((item) => item.count > 0)
      : data;
  }, [filteredVulnerabilities]);

  const trendData = React.useMemo(() => {
    if (timePeriod === "last-build") return [];

    // Generate mock trend data for demonstration
    const days =
      timePeriod === "1-day"
        ? 1
        : timePeriod === "1-week"
          ? 7
          : 30;
    const data = [];

    for (let i = days - 1; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);

      data.push({
        date: date.toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
        }),
        critical: Math.floor(Math.random() * 5) + 2,
        high: Math.floor(Math.random() * 8) + 5,
        medium: Math.floor(Math.random() * 15) + 10,
        low: Math.floor(Math.random() * 20) + 15,
      });
    }

    return data;
  }, [timePeriod]);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return "bg-red-100 text-red-800 border-red-200";
      case "high":
        return "bg-orange-100 text-orange-800 border-orange-200";
      case "medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200";
      case "low":
        return "bg-green-100 text-green-800 border-green-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  const formatFirstSeenBuild = (
    vuln: VulnerabilityRecord,
  ): string => {
    if (
      !vuln.detectionHistory ||
      vuln.detectionHistory.length === 0
    ) {
      return "Unknown";
    }

    // Find the earliest detection
    const firstDetection = vuln.detectionHistory.sort(
      (a, b) => a.timestamp.getTime() - b.timestamp.getTime(),
    )[0];

    // Format as YYYY.MM.DD.build-sequence
    const date = firstDetection.timestamp;
    const buildNum =
      firstDetection.buildId.split("-").pop() || "1";
    return `${date.getFullYear()}.${String(date.getMonth() + 1).padStart(2, "0")}.${String(date.getDate()).padStart(2, "0")}.${buildNum}`;
  };

  const formatFirstSeenTime = (
    vuln: VulnerabilityRecord,
  ): string => {
    if (!vuln.firstDetected) return "Unknown";

    // Format as DD MMM, HH:MM IST
    const date = vuln.firstDetected;
    const months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];
    const day = String(date.getDate()).padStart(2, "0");
    const month = months[date.getMonth()];
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");

    return `${day} ${month}, ${hours}:${minutes}`;
  };

  const totalVulnerabilities = vulnerabilityData.reduce(
    (sum, item) => sum + item.count,
    0,
  );
  const criticalHighCount = vulnerabilityData
    .slice(0, 2)
    .reduce((sum, item) => sum + item.count, 0);

  // Determine if we should show multi-build components
  const isMultipleBuild = timePeriod !== "last-build";

  // Check if there are multiple images in the time period
  const hasMultipleImages = () => {
    if (timePeriod === "last-build") return false;
    return getImageCount() > 1;
  };

  // Animation variants for conditional components
  const slideInVariants = {
    hidden: {
      opacity: 0,
      x: -30,
      y: 10,
      scale: 0.9,
      filter: "blur(4px)",
    },
    visible: {
      opacity: 1,
      x: 0,
      y: 0,
      scale: 1,
      filter: "blur(0px)",
      transition: {
        duration: 0.25,
        ease: [0.23, 1, 0.32, 1], // Custom easing for smooth feel
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      x: 30,
      y: -10,
      scale: 0.9,
      filter: "blur(4px)",
      transition: {
        duration: 0.2,
        ease: [0.23, 1, 0.32, 1],
      },
    },
  };

  const getImageCount = () => {
    switch (timePeriod) {
      case "last-build":
        return 1;
      case "1-day":
        return 3;
      case "1-week":
        return 12;
      case "1-month":
        return 48;
      default:
        return 1;
    }
  };

  const handleComparisonFilter = (type: string) => {
    if (activeComparisonFilter === type) {
      setActiveComparisonFilter(null);
      // Clear filters - show all vulnerabilities
      setFilteredVulnerabilities(vulnerabilities);
    } else {
      setActiveComparisonFilter(type);
      // Apply comparison-based filtering
      // This would require additional logic to track which vulnerabilities are new/resolved
      // For now, we'll just simulate the filtering
      setFilteredVulnerabilities(vulnerabilities);
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2>Docker Vulnerability Analysis</h2>
          <p className="text-muted-foreground">
            {timePeriod === "last-build"
              ? "Latest build analysis"
              : `Analysis for ${timePeriod.replace("-", " ")}`}
          </p>
        </div>
      </div>

      {/* Overview Cards */}
      <motion.div
        className={`grid grid-cols-1 gap-4 ${hasMultipleImages() ? "md:grid-cols-3 lg:grid-cols-5" : timePeriod === "last-build" ? "md:grid-cols-5" : "md:grid-cols-2"}`}
        layout
        transition={{ duration: 0.25, ease: "easeInOut" }}
      >
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.1 }}
        >
          <CardKPI
            title="Total Vulnerabilities"
            value={totalVulnerabilities}
            icon={Bug}
            subtitle={
              timePeriod === "last-build"
                ? "In current build"
                : `Across ${getImageCount()} builds`
            }
          />
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.2 }}
        >
          <CardKPI
            title="Critical & High"
            value={criticalHighCount}
            icon={AlertTriangle}
            iconColor="text-red-500"
            subtitle="Action required"
            className="[&_.text-2xl]:text-red-600"
          />
        </motion.div>

        {/* This Build vs Previous - only show for last-build */}
        {timePeriod === "last-build" && (
          <>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.3 }}
            >
              <CardKPI
                title="New since previous build"
                value={buildComparison.newInBuild}
                icon={TrendingUp}
                iconColor="text-blue-500"
                subtitle="Since previous build"
                onClick={() => handleComparisonFilter("new")}
                selected={activeComparisonFilter === "new"}
                className="[&_.text-2xl]:text-blue-600"
              />
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.4 }}
            >
              <CardKPI
                title="Resolved since previous build"
                value={buildComparison.resolvedSincePrevious}
                icon={TrendingDown}
                iconColor="text-green-500"
                subtitle="Issues fixed"
                onClick={() =>
                  handleComparisonFilter("resolved")
                }
                selected={activeComparisonFilter === "resolved"}
                className="[&_.text-2xl]:text-green-600"
              />
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.5 }}
            >
              <CardKPI
                title="Unchanged"
                value={buildComparison.unchanged}
                icon={Minus}
                iconColor="text-gray-500"
                subtitle="Persistent issues"
                onClick={() =>
                  handleComparisonFilter("unchanged")
                }
                selected={
                  activeComparisonFilter === "unchanged"
                }
                className="[&_.text-2xl]:text-gray-600"
              />
            </motion.div>
          </>
        )}

        {/* Images Analyzed - conditional visibility */}
        <AnimatePresence
          mode="wait"
          key={`images-${timePeriod}`}
        >
          {hasMultipleImages() && (
            <motion.div
              key={`images-analyzed-${timePeriod}`}
              variants={slideInVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              layout
            >
              <CardKPI
                title="Images Analyzed"
                value={getImageCount()}
                icon={Shield}
                iconColor="text-green-500"
                subtitle="Docker builds analyzed"
              />
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>

      {/* Charts */}
      <motion.div
        className={`grid grid-cols-1 gap-6 ${hasMultipleImages() ? "lg:grid-cols-2" : ""}`}
        layout
        transition={{ duration: 0.25, ease: "easeInOut" }}
      >
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.4, delay: 0.3 }}
        >
          <Card>
            <CardHeader>
              <CardTitle>Vulnerability Distribution</CardTitle>
              <CardDescription>
                {timePeriod === "last-build"
                  ? "Current vulnerabilities by severity"
                  : `Vulnerabilities by severity (${timePeriod.replace("-", " ")})`}
              </CardDescription>
            </CardHeader>
            <CardContent className="p-6">
              {totalVulnerabilities > 0 ? (
                <div className="space-y-4">
                  {/* Custom SVG Pie Chart */}
                  <div className="w-full h-[220px] flex items-center justify-center">
                    <CustomPieChart
                      data={vulnerabilityData.filter(
                        (item) => item.count > 0,
                      )}
                    />
                  </div>

                  {/* Legend */}
                  <div className="flex flex-wrap justify-center gap-4 h-[44px] items-center">
                    {vulnerabilityData
                      .filter((item) => item.count > 0)
                      .map((item, index) => (
                        <div
                          key={index}
                          className="flex items-center gap-2"
                        >
                          <div
                            className="w-4 h-4 rounded-full"
                            style={{
                              backgroundColor: item.color,
                            }}
                          />
                          <span className="text-sm font-medium">
                            {item.name} ({item.count})
                          </span>
                        </div>
                      ))}
                  </div>
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-[288px] text-muted-foreground">
                  <Shield className="h-12 w-12 mb-3 text-muted-foreground/50" />
                  <h3 className="font-medium mb-1">
                    No Vulnerabilities Found
                  </h3>
                  <p className="text-sm text-center">
                    {activeFilters.length > 0
                      ? "No vulnerabilities match the current filters"
                      : "No vulnerabilities detected in this time period"}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>

        {/* Vulnerability Trends - conditional visibility */}
        <AnimatePresence
          mode="wait"
          key={`trends-${timePeriod}`}
        >
          {hasMultipleImages() && (
            <motion.div
              key={`vulnerability-trends-${timePeriod}`}
              variants={slideInVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              layout
            >
              <Card>
                <CardHeader>
                  <CardTitle>Vulnerability Trends</CardTitle>
                  <CardDescription>
                    Vulnerability count by severity over time
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer
                    width="100%"
                    height={302}
                  >
                    <BarChart data={trendData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" />
                      <YAxis />
                      <RechartsTooltip />
                      <Bar
                        dataKey="critical"
                        stackId="a"
                        fill="var(--severity-critical)"
                      />
                      <Bar
                        dataKey="high"
                        stackId="a"
                        fill="var(--severity-high)"
                      />
                      <Bar
                        dataKey="medium"
                        stackId="a"
                        fill="var(--severity-medium)"
                      />
                      <Bar
                        dataKey="low"
                        stackId="a"
                        fill="var(--severity-low)"
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>

      {/* Filters */}
      <div>
        <VulnerabilityFilters
          key={`${environment}-${release}-${timePeriod}`}
          filters={filters}
          onFiltersChange={(newFilters) => {
            setFilters(newFilters);
            // Update global filters
            if (onFiltersChange) {
              const globalFilters: string[] = [];
              Object.entries(newFilters).forEach(([category, values]) => {
                values.forEach((value) => {
                  globalFilters.push(`${category}: ${value}`);
                });
              });
              onFiltersChange(globalFilters);
            }
          }}
          availableOptions={filterOptions}
        />
      </div>

      {/* Vulnerabilities Table */}
      <div>
        <Card>
          <CardHeader>
            <CardTitle>
              {timePeriod === "last-build"
                ? "Build Vulnerabilities"
                : "Vulnerabilities Found"}
            </CardTitle>
            <CardDescription>
              {timePeriod === "last-build" ? (
                <div className="space-y-1">
                  <div>
                    Vulnerabilities detected in current Docker
                    build • Sorted by severity
                  </div>
                  <div className="text-xs">
                    <span className="font-medium">Build:</span>{" "}
                    {buildInfo?.imageInfo?.name ||
                      `${environment}-app`}
                    :{buildInfo?.imageInfo?.tag || "latest"} •
                    <span className="font-medium ml-2">
                      Built:
                    </span>{" "}
                    {vulnerabilityService.formatBuildTime(
                      buildInfo,
                    )}{" "}
                    •
                    <span className="font-medium ml-2">
                      Base Image:
                    </span>{" "}
                    {buildInfo?.imageInfo?.baseImage ||
                      "node:18-alpine"}
                  </div>
                </div>
              ) : (
                `Vulnerabilities detected in selected time period`
              )}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>CVE</TableHead>
                  <TableHead>
                    Package / Installed → Fixed
                  </TableHead>
                  <TableHead>Severity</TableHead>
                  <TableHead>Repo / Image</TableHead>
                  <TableHead>First Seen</TableHead>
                  <TableHead>CVSS</TableHead>
                  <TableHead>Actions</TableHead>
                  <TableHead>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <span className="cursor-help">
                            Remediation (AI)
                          </span>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>
                            Generated from build/runtime
                            context. Verify before applying.
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredVulnerabilities
                  .filter((vuln) => vuln && vuln.id) // Filter out invalid entries
                  .map((vuln) => (
                    <TableRow key={vuln.id}>
                      <TableCell className="font-mono text-sm">
                        {vuln.id}
                      </TableCell>
                      <TableCell className="min-w-[200px]">
                        <div className="space-y-1">
                          <div className="font-mono text-sm">
                            {vuln.packageInfo?.name ||
                              vuln.component.split(":")[0]}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {vuln.packageInfo
                              ?.installedVersion ||
                              "Unknown"}{" "}
                            →{" "}
                            {vuln.packageInfo?.fixedVersion ||
                              "Latest"}
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <BadgeSeverity
                          severity={
                            vuln.severity.toLowerCase() as
                              | "critical"
                              | "high"
                              | "medium"
                              | "low"
                          }
                        />
                      </TableCell>
                      <TableCell className="min-w-[150px]">
                        <div className="space-y-1">
                          <div className="text-sm">
                            {vuln.repo || "Unknown"}
                          </div>
                          <div className="text-xs text-muted-foreground font-mono">
                            {vuln.image || vuln.component}
                          </div>
                        </div>
                      </TableCell>
                      <TableCell className="min-w-[150px]">
                        <div className="space-y-1">
                          <div className="font-mono text-sm">
                            {formatFirstSeenBuild(vuln)}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {formatFirstSeenTime(vuln)} IST
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <span className="font-mono text-sm">
                          {vuln.cvssScore || "N/A"}
                        </span>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-1">
                          <ButtonIconOnly
                            icon={Eye}
                            tooltip="View details"
                            variant="view"
                            onClick={() =>
                              window.open(
                                `https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.id}`,
                                "_blank",
                              )
                            }
                          />
                          <ButtonIconOnly
                            icon={Copy}
                            tooltip="Copy CVE ID"
                            variant="copy"
                            onClick={() => {
                              navigator.clipboard.writeText(
                                vuln.id,
                              );
                              // You could add a toast here
                            }}
                          />
                          <ButtonIconOnly
                            icon={ExternalLink}
                            tooltip="Open in CVE database"
                            variant="default"
                            onClick={() =>
                              window.open(
                                `https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.id}`,
                                "_blank",
                              )
                            }
                          />
                        </div>
                      </TableCell>
                      <TableCell className="min-w-[300px]">
                        <div className="flex items-center gap-2">
                          <div className="flex-1 text-sm text-muted-foreground truncate">
                            {
                              vuln.aiRecommendation.split(
                                ".",
                              )[0]
                            }
                            ...
                          </div>
                          <RemediationDrawer
                            vulnerability={vuln}
                          >
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-7 px-2"
                            >
                              <Sparkles className="h-3 w-3 mr-1" />
                              View
                            </Button>
                          </RemediationDrawer>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}